SPEECH OF PRESENTATION: 

Char 1 ->  // Part of history(krish)

First of all, the name of our topic is Hashing and collision 
So before knowing about the Hashing and collision, we have to 
take about the history of the hashing, which means when, where,
 how or why the hashing was made. 
Its discovery was not as easy as it sounds. There are a lot of 
huge things behind this. During our research, we learned this 
from certain experts. Now let's get started.The time was in June
 of the 1941 in a corner of America for a computer lab called SVL,
it is a IBM computer research facilities. At that time, Sir Hans
Peter Luhn was appointed as a head of  Information Retrieval 
Research Department here. James Perry and Malcolm Dyson brought
a problem to this department of IBM in 1947. The challenge was to 
search chemical compounds that had been stored in coded form. This
was the first Luhn was introduced to the experimenting field of 
information and documentation science. He used to provide solutions,
but at that time the available machines also had their limitations. 
Then he had to find new methods to overcome these limitations. And 
the 1950s came which was the ‘computer age’. Luhn had started spending
a great deal amount of time on the challenges of the information 
retrieval system. In 1953 Luhn had the idea to put all the information
in a bucket. He predicted that this would make searching faster. And 
this information can consist of numbers as well as text. Luhn’s 
invention was further shaped and modified by scientists of the coming
generation . And now we call this thing Hashing.

//change the slide

Here we give the path way to cover the full hashing and Collision.
please check out the light blue lines only to acchive the best
root to understand hashing and collision.

Char 2 -> //hashing

Now let's get to the main point of "what hashing is"-
Hashing is a technique of mapping a large chunk of data into small
tables using a hashing function. A particular piece of information 
can also be found from a group using hashing.Let us understand this
with a simple example -
Students are assigned a special unique roll number in schools or 
universities.With the help of that all the information about that 
student is available. Like his name, class, address etc.
Those of you who know about php and sql  then you will know how to 
get this information well, and those of you who do not know about this
matter have nothing to fear, you will know later.
In hashing, in this way, each object is given a key with the help of 
which its information can be retrieved.

//change the slide

Next point is "which ability have hashing"-
Some key points are as follows 
*) In hashing, large keys can also be changed to small keys.
*) All information is stored in a table called Hash table, so there is
 no difficulty in searching.
*)Its main mantra(law) is to be able to do all kinds of work within O(1)
 time.

Now "how to implement hashing"
It uses the Hash function to convert the element to a number that is stored in
the Hashtable as a key.Here's an attempt to show how it does this.And it is good
to mention that every division time is divided by 10 for ease of understanding 
First, take 11 and divide it by 10 and get 1, so here 11 is placed at index 1 in
this hash-table. Now, take 12 and divide it by 10 and get 2, so here 12 is placed
at index 2 in this hash-table. In this way all were done and placed in their 
proper places.

//change the slide

Char 3 -> //hash to collision

The next question -
"What is Hash function"
Hash function is any function that can be convert any simple text to a hashed text
and fixed arbitrary size. The values returned by a hash function are called hash 
values or hash codes.
Now the point is hash table-
Hash table is used to store keys pairs and It is nothing but a special type of array.
The average time required to search for an element in a hash table is O(1) time.
Advantages of hash table-
*)Hash table is more apparent when the number of entries is large.
*) Any key can be easily found because it is just a simple bucket/array.
*) Any key in this table can be changed or deleted if needed.
//Change the slide
Now , the next point is collision-
By now, a question may come to many people's mind that if a key gets the same place in
the hash table as calculated by the hash function, who will be in that place. Yes, this
incident happened in 1956. It was then named Collision which is still unchanged.
Collisions are nothing more than when the hash function is in a situation where more than 
one key is placed in the same place in the hash table. In the example given here it 
appears that the two keys 13 and 23 are in the same position in the hash table is index 3,
so their problem is who will be in that position.That problem will be solved from the 
following points.

The next point is resolution of collision-
The way to settle the collision so that it does not happen is called Resolution of collision.
This solution can be divided into two types namely open hashing and close hashing. A system 
that has an open hashing is called a "separate Chaining". On the other hand, closed hashing 
can be divided into three ways, namely "linear probing, quadratic probing, and double hashing".

//Change the slide

char 1 -> //resolution (krish)

The tree object is very straightforward where the keys are stored in separate nodes and the 
root table only holds the addresses of the first nodes. All will be understood by looking 
at this example given here Here the first 11 is collected in a node and its address is kept
in index 1 only. In this way, 12 are collected in a separate node and its address is kept in 
index 2.And when the time came for 13, 23 and 53, then they were collected in different nodes 
and made a chain and its base address was kept in index 3.The rest were done in the same way.

The next point is Linear probing-

The previous method was very difficult to find a key and took up a lot of space so this method
was introduced instead.Its subject matter is also very simple.One by one the keys have to sit
in their place. If a key is sitting in its proper place and sees that there is already a key 
sitting there, then it will obey this rule written here.The rule is that the number of times 
it tries will be added to the value of the primary key and divided by 10 here.
The example is also given when 23 went to sit in his seat and found there was 13. This rule 
was observed, first time tried so 1 joined it and became 24 and divided by 10 left 4. So 24 
sat index 4 because it was empty. And when the time came for 14th, as her place was full, the 
rule was observed and 14th changed to 15th. And as she could not find the 5th place, she went 
to the 0th place according to the rules.

//change the slide

char 2 ->

